diff --git a/node_modules/react-native-get-random-values/index.js b/node_modules/react-native-get-random-values/index.js
index e143bfe..c17b08d 100644
--- a/node_modules/react-native-get-random-values/index.js
+++ b/node_modules/react-native-get-random-values/index.js
@@ -1,11 +1,11 @@
 const base64Decode = require('fast-base64-decode')
 const { NativeModules } = require('react-native')
 
-class TypeMismatchError extends Error {}
-class QuotaExceededError extends Error {}
+class TypeMismatchError extends Error { }
+class QuotaExceededError extends Error { }
 
 let warned = false
-function insecureRandomValues (array) {
+function insecureRandomValues(array) {
   if (!warned) {
     console.warn('Using an insecure random number generator, this should only happen when running in a debugger without support for crypto.getRandomValues')
     warned = true
@@ -23,24 +23,59 @@ function insecureRandomValues (array) {
  * @param {number} byteLength
  * @returns {string}
  */
-function getRandomBase64 (byteLength) {
-  if (NativeModules.RNGetRandomValues) {
-    return NativeModules.RNGetRandomValues.getRandomBase64(byteLength)
-  } else if (NativeModules.ExpoRandom) {
-    // Expo SDK 41-44
-    return NativeModules.ExpoRandom.getRandomBase64String(byteLength)
-  } else if (global.ExpoModules) {
-    // Expo SDK 45+
-    return global.ExpoModules.ExpoRandom.getRandomBase64String(byteLength);
-  } else {
-    throw new Error('Native module not found')
+// function getRandomBase64 (byteLength) {
+//   // if (NativeModules.RNGetRandomValues) {
+//   console.log({byteLength})
+//     // return NativeModules.RNGetRandomValues.getRandomBase64(byteLength)
+
+//   // } 
+//   // else if (NativeModules.ExpoRandom) {
+//   //   // Expo SDK 41-44
+//   //   return NativeModules.ExpoRandom.getRandomBase64String(byteLength)
+//   // } else if (global.ExpoModules) {
+//   //   // Expo SDK 45+
+//   //   return global.ExpoModules.ExpoRandom.getRandomBase64String(byteLength);
+//   // } 
+//   // else {
+//   //   throw new Error('Native module not found')
+//   // }
+// }
+function getRandomBase64(length) {
+  // Step 1: Generate random bytes
+  let randomBytes = '';
+  for (let i = 0; i < length; i++) {
+    // Generate a random byte between 0 and 255
+    randomBytes += String.fromCharCode(Math.floor(Math.random() * 256));
+  }
+
+  // Step 2: Convert random bytes to Base64
+  const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
+
+  let result = '';
+  let i = 0;
+
+  // Process each 3-byte chunk and encode to Base64
+  while (i < randomBytes.length) {
+    let byte1 = randomBytes.charCodeAt(i++);
+    let byte2 = i < randomBytes.length ? randomBytes.charCodeAt(i++) : NaN;
+    let byte3 = i < randomBytes.length ? randomBytes.charCodeAt(i++) : NaN;
+
+    let triplet = (byte1 << 16) | (byte2 << 8) | byte3;
+
+    // Get the 4 Base64 characters
+    result += base64Chars[(triplet >> 18) & 0x3F];
+    result += base64Chars[(triplet >> 12) & 0x3F];
+    result += isNaN(byte2) ? '=' : base64Chars[(triplet >> 6) & 0x3F];
+    result += isNaN(byte3) ? '=' : base64Chars[triplet & 0x3F];
   }
+
+  return result;
 }
 
 /**
  * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray} array
  */
-function getRandomValues (array) {
+function getRandomValues(array) {
   if (!(array instanceof Int8Array || array instanceof Uint8Array || array instanceof Int16Array || array instanceof Uint16Array || array instanceof Int32Array || array instanceof Uint32Array || array instanceof Uint8ClampedArray)) {
     throw new TypeMismatchError('Expected an integer array')
   }
@@ -68,7 +103,7 @@ function getRandomValues (array) {
   return array
 }
 
-function isRemoteDebuggingInChrome () {
+function isRemoteDebuggingInChrome() {
   // Remote debugging in Chrome is not supported in bridgeless
   if ('RN$Bridgeless' in global && RN$Bridgeless === true) {
     return false
